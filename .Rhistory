user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
install.packages('ggmap')
install.packages("ggmap")
detach("package:RMySQL", unload=TRUE)
install.packages(c("BH", "Matrix", "R6", "Rcpp", "RgoogleMaps", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "geosphere", "git2r", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "maps", "maptools", "mgcv", "mime", "nlme", "openssl", "plyr", "proto", "reshape2", "rgeos", "rmarkdown", "rstudioapi", "shiny", "sp", "stringi", "stringr", "survival", "tidyr", "withr", "yaml"))
install.packages(c("BH", "Matrix", "R6", "Rcpp", "RgoogleMaps", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "geosphere", "git2r", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "maps", "maptools", "mgcv", "mime", "nlme", "openssl", "plyr", "proto", "reshape2", "rgeos", "rmarkdown", "rstudioapi", "shiny", "sp", "stringi", "stringr", "survival", "tidyr", "withr", "yaml"))
install.packages(c("BH", "Matrix", "R6", "Rcpp", "RgoogleMaps", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "geosphere", "git2r", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "maps", "maptools", "mgcv", "mime", "nlme", "openssl", "plyr", "proto", "reshape2", "rgeos", "rmarkdown", "rstudioapi", "shiny", "sp", "stringi", "stringr", "survival", "tidyr", "withr", "yaml"))
install.packages(c("BH", "Matrix", "R6", "Rcpp", "RgoogleMaps", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "geosphere", "git2r", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "maps", "maptools", "mgcv", "mime", "nlme", "openssl", "plyr", "proto", "reshape2", "rgeos", "rmarkdown", "rstudioapi", "shiny", "sp", "stringi", "stringr", "survival", "tidyr", "withr", "yaml"))
install.packages(c("BH", "Matrix", "R6", "Rcpp", "RgoogleMaps", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "geosphere", "git2r", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "maps", "maptools", "mgcv", "mime", "nlme", "openssl", "plyr", "proto", "reshape2", "rgeos", "rmarkdown", "rstudioapi", "shiny", "sp", "stringi", "stringr", "survival", "tidyr", "withr", "yaml"))
install.packages(c("BH", "Matrix", "R6", "Rcpp", "RgoogleMaps", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "geosphere", "git2r", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "maps", "maptools", "mgcv", "mime", "nlme", "openssl", "plyr", "proto", "reshape2", "rgeos", "rmarkdown", "rstudioapi", "shiny", "sp", "stringi", "stringr", "survival", "tidyr", "withr", "yaml"))
install.packages(c("BH", "Matrix", "R6", "Rcpp", "RgoogleMaps", "cluster", "codetools", "colorspace", "curl", "devtools", "digest", "dplyr", "evaluate", "foreign", "formatR", "geosphere", "git2r", "highr", "htmlwidgets", "httr", "jsonlite", "knitr", "lattice", "maps", "maptools", "mgcv", "mime", "nlme", "openssl", "plyr", "proto", "reshape2", "rgeos", "rmarkdown", "rstudioapi", "shiny", "sp", "stringi", "stringr", "survival", "tidyr", "withr", "yaml"))
library('dplyr')
library('ggplot2')
library('ggmap')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
detach("package:ggplot2", unload=TRUE)
detach("package:ggmap", unload=TRUE)
library("ggmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:ggmap", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
library('dplyr')
library('ggplot2')
library('ggmap')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
library("plotly", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library('dplyr')
library('plotly')
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
#library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
#library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
detach("package:plotly", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:RJSONIO", unload=TRUE)
#library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
source('~/Documents/project/R/paycial/data.R', echo=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source('~/Documents/project/R/paycial/data.R', echo=TRUE)
install.packages('ggmap')
install.packages("ggmap")
source('~/Documents/project/R/paycial/data.R', echo=TRUE)
source('~/Documents/project/R/paycial/data.R', echo=TRUE)
#library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
#seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
#plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
#seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
#seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
#plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
#seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
runApp()
runApp()
runApp()
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
source("util.R")
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
#seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
#plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
#seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
#seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
#plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
#seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
runApp()
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
dbDisconnect(conn)
#location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
#seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
#plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
#seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
runApp()
library('dplyr')
library('ggmap')
library('ggplot2')
library('shiny')
library('leaflet')
library('RMySQL')
# get data from DB
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "paycial",
host = "paycial.cwirrisfr2wu.us-east-1.rds.amazonaws.com",
user = "yws08",
password = "PAYwon08!"
)
#location = dbGetQuery(conn, "SELECT * FROM paycial.LOCATION_LOG WHERE LATITUDE != 0 AND LONGITUDE != 0;")
#dbDisconnect(conn)
location <- read.csv("location.csv")
seoulLonLat = unlist(geocode('seoul', source = 'google'))
#seoulmap = qmap(seoulLonLat, zoom = 11, source = 'stamen', maptype = 'toner-lite')
#plotLocation = ggplot(data = location, aes(x = LATITUDE, y = LONGITUDE))
dataNoZLoc = filter(location, LONGITUDE != 0, LATITUDE != 0)
dataAllLoc = select(dataNoZLoc, LONGITUDE, LATITUDE, REG_ID) %>%
mutate(DATE = as.Date(dataNoZLoc$REG_DT))
#%>% mutate(REGION = reverseGeoCode(c(dataNoZLoc$LATITUDE, dataNoZLoc$LONGITUDE)))
#lons = as.double(dataNoZLoc$LONGITUDE)
#lats = as.double(dataNoZLoc$LATITUDE)
#temp <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), lons, lats)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)
dataPayLoc = filter(dataNoZLoc, API_TYPE == 'paygroup/payment')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT) %>%
mutate(DATE = as.Date(dataPayLoc$REG_DT))
dataCheckLoc = filter(dataNoZLoc, API_TYPE == 'checkIn')%>%
select(LONGITUDE, LATITUDE, REG_ID, REG_DT)%>%
mutate(DATE = as.Date(dataCheckLoc$REG_DT))
#seoulmap + geom_point(data = dataCheckLoc, aes(LONGITUDE, LATITUDE), size = 3, colour='#018b4d')
runApp()
View(location)
